
.ifndef DBLNET

namespace SynPSG.System.Security

    public sealed class SecureString ;;implements IDisposable

        private textString  ,string ;;this should be encrypted
        private mIsReadOnly ,boolean

        public property isReadOnly ,boolean
            method get
            proc
                mreturn mIsReadOnly
            endmethod
        endproperty

        ;;;<summary>
        ;;;Initializes a new instance of the SecureString class
        ;;;</summary>
        public method SecureString
            endparams
        proc
            textString = ''
            mIsReadOnly = false
        endmethod

        ;;;<summary>
        ;;;Initializes a new instance of the SecureString class
        ;;;</summary>
        public method SecureString
            aChars              ,string ;;char*
            aSize               ,int
            endparams
        proc
            if(aChars == ^NULL)
                throw new ArgumentNullException()
            if(aSize < 1 || aSize > 65536 || aSize > aChars.Length)
                throw new ArgumentOutOfRangeException()
            textString = aChars(1,aSize)
            mIsReadOnly = false
        endmethod

        public method AppendChar,void
            req in aChar        ,char
            endparams
        proc
            if(textString.Length > 65535)
                throw new ArgumentOutOfRangeException()
            if(mIsReadOnly == true)
                throw new InvalidOperationException()
            textString = textString + aChar
        endmethod

        public method Clear    ,void
            endparams
        proc
            if(mIsReadOnly == true)
                throw new InvalidOperationException()
            textString = ''
        endmethod

        public method InsertAt  ,void
            req in aIndex       ,int
            req in aChar        ,char
            endparams
        proc
            if(aIndex < 0 || aIndex > textString.Length-1 || textString.Length > 65535)
                throw new ArgumentOutOfRangeException()
            if(mIsReadOnly == true)
                throw new InvalidOperationException()

            using aIndex select
            (0),
                textString = aChar + textString
            (textString.Length-1),
                textString = textString(1:aIndex) + aChar
            (),
                textString = textString(1:aIndex) + aChar + textString(aIndex+1,textString.Length)
            endusing
        endmethod

        public method MakeReadOnly    ,void
            endparams
        proc
            mIsReadOnly = true
        endmethod

        public method RemoveAt  ,void
            req in aIndex       ,int
            endparams
        proc
            if(aIndex < 0 || aIndex > textString.Length-1 || textString.Length < 1)
                throw new ArgumentOutOfRangeException()
            if(mIsReadOnly == true)
                throw new InvalidOperationException()

            using aIndex select
            (0),
                textString = textString(2,textString.Length)
            (textString.Length-1),
                textString = textString(1:aIndex)
            (),
                textString = textString(1:aIndex) + textString(aIndex+2,textString.Length)
            endusing
        endmethod

        public method SetAt     ,void
            req in aIndex       ,int
            req in aChar        ,char
            endparams
        proc
            if(aIndex < 0 || aIndex > textString.Length-1)
                throw new ArgumentOutOfRangeException()
            if(mIsReadOnly == true)
                throw new InvalidOperationException()

            using aIndex select
            (0),
                textString = aChar + textString(2,textString.Length)
            (textString.Length-1),
                textString = textString(1:aIndex) + aChar
            (),
                textString = textString(1:aIndex) + aChar + textString(aIndex+2,textString.Length)
            endusing
        endmethod

    endclass

endnamespace

.endc
