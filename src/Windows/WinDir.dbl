;;*****************************************************************************
;;
;; Title:       WinDir.dbl
;;
;; Type:        Function
;;
;; Description: Returns a collection of filenames matching a passed wildcard
;;              file specification.
;;
;; Date:        16th October 2010
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import System.Collections

function WinDir, boolean

    required in  searchSpec		,a			;;Search spec
    required out matchingFiles  ,@ArrayList ;;Template names
    endparams

    stack record
        dll         			,D_ADDR ;;DLL Handle
		sh						,i4     ;;Search handle
		pos						,i4
		folder					,string
		spec					,a260   ;;Search spec
    endrecord

    stack record WIN32_FIND_DATA
        FileAttributes      	,i4     ;;File attribute bit flags
        CreationTimeLow     	,i4     ;; Low-order 32 bits of file creation time (UTC format)
        CreationTimeHigh    	,i4     ;;High-order 32 bits of file creation time (UTC format)
        LastAccessTimeLow   	,i4     ;; Low-order 32 bits of last access time (UTC format)
        LastAccessTimeHigh  	,i4     ;;High-order 32 bits of last access time (UTC format)
        LastWriteTimeLow    	,i4     ;; Low-order 32 bits of last write time (UTC format)
        LastWriteTimeHigh   	,i4     ;;High-order 32 bits of last write time (UTC format)
        FileSizeHigh        	,i4     ;;High-order 32 bits of file size (bytes)
        FileSizeLow         	,i4     ;; Low-order 32 bits of file size (bytes)
        Reserved0           	,i4     ;;
        Reserved1           	,i4     ;;
        FileName            	,a260   ;;Name of file (null-terminated string)
        AlternateFileName   	,a14    ;;8.3 file name (null-terminated string
    endrecord

    .define INVALID_HANDLE_VALUE		-1
    .define FILE_ATTRIBUTE_READONLY     %x(1)
    .define FILE_ATTRIBUTE_HIDDEN       %x(2)
    .define FILE_ATTRIBUTE_SYSTEM       %x(4)
    .define FILE_ATTRIBUTE_DIRECTORY    %x(10)
    .define FILE_ATTRIBUTE_ARCHIVE      %x(20)
    .define FILE_ATTRIBUTE_NORMAL       %x(80)
    .define FILE_ATTRIBUTE_TEMPORARY    %x(100)
    .define FILE_ATTRIBUTE_COMPRESSED   %x(800)
    .define FILE_ATTRIBUTE_OFFLINE      %x(1000)

proc

    dll = %dll_open("kernel32.dll")

	matchingFiles = new ArrayList()
	xcall fill(char(0),spec)

    if (pos = %instr(1,searchSpec,":")) then
    begin
		data logical, string
		data trans, a256
		data file, string
		logical = searchSpec(1:pos-1)
		file = searchSpec(pos+1,%trim(searchSpec))
		xcall getlog(logical,trans,pos)
		if (trans(%trim(trans):1)!="\") then
			folder = %atrim(trans) + "\"
		else
			folder = %atrim(trans)
		file = folder + file
		spec(1:file.length) = file
	end
	else
		spec(1:%trim(searchSpec))=searchSpec

    ;;Look for the first file
    sh = %dll_call(dll,DLL_TYPE_WINAPI,"FindFirstFileA",^addr(spec),^addr(WIN32_FIND_DATA))

    if (sh != INVALID_HANDLE_VALUE)
    begin
        ;;First file not a directory?
        if (!(FileAttributes & FILE_ATTRIBUTE_DIRECTORY))
            matchingFiles.Add(folder + (String)FileName(1:(instr(1,FileName,char(0))-1)))

        ;;Continue the search
		while (%dll_call(dll,DLL_TYPE_WINAPI,"FindNextFileA",sh,^addr(WIN32_FIND_DATA)))
		begin
			;;Found another file, check it's not a directory
			if (!(FileAttributes & FILE_ATTRIBUTE_DIRECTORY))
				matchingFiles.Add(folder + (String)FileName(1:(%instr(1,FileName,%char(0))-1)))
		end

        ;;Close the search handle
        dll_call(dll,DLL_TYPE_WINAPI,"FindClose",sh)
    end

	;;Close the DLL
    dll = dll_close(dll)

    freturn (matchingFiles.Count > 0)

endfunction

