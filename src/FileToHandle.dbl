;*****************************************************************************
;
; Title:        FileToHandle
;
; Description:  Loads a file into a dynamic memory handle
;
; Author:       Steve Ives (Synergex Professional Services Group)
;
; Date:         1st June 2006
;
; Platforms:    All platforms
;
;*****************************************************************************
;
; This code is supplied as seen and without warranty or support, and is used
; at your own risk. Neither the author or Synergex accept any responsability
; for any loss or damage which may result from the use of this code.
;
;*****************************************************************************
;

namespace SynPSG

	function FileToHandle ,^VAL

		a_file      ,a              ;File name to load (IN)
		a_mh        ,i              ;Memory handle (IN/OUT)
		endparams
		
		stack record ivars
			retval      ,i4             ;Routine return value
			ch          ,i4             ;Input file channel
			blocks      ,i4             ;Block counter
			chars       ,i4             ;Size of last block (bytes)
		endrecord
		
		structure block
						,a32768         ;Block size - how many bytes to read at once.
										;Must be less than 64K
		endstructure
		
		stack record avars
			buf         ,a^size(block)  ;IO Buffer
		endrecord

	proc

		clear ^i(ivars), avars

		;Open input file
		open(ch=%syn_freechn,u,a_file) [$ERR_FNF=nf,$ERR_PROTEC=pf,ERR=err]

		;Error checking for file open
		if (0)
		begin
	nf,     retval=1    ;File not found
			exit
	pf,     retval=2    ;Protection violation
			exit
	err,    retval=3    ;Other error
		end

		if (!retval)
		begin
			if (a_mh) then
				clear ^i(^m(a_mh))
			else
				a_mh = %mem_proc(DM_ALLOC+DM_STATIC,1)

			;Read data from file in "block size" chunks
			repeat
			begin
				clear buf
				gets(ch,buf,ef)
				blocks+=1
				a_mh = %mem_proc(DM_RESIZ,^size(block)*blocks,a_mh)
				^m(block[blocks],a_mh)=buf
			end

			;We hit EOF, save away the final buffer of data
	ef,     chars=%rsize
			if (chars)
			begin
				blocks+=1
				a_mh = %mem_proc(DM_RESIZ,^size(block)*blocks,a_mh)
				^m(block[blocks],a_mh)=buf

				;Resize handle to exact size of file.
				a_mh = %mem_proc(DM_RESIZ,((^size(block)*(blocks-1))+(chars)),a_mh)
			end

		end

		if (retval!=1)
			close ch

		freturn retval

	endfunction
	
endnamespace

