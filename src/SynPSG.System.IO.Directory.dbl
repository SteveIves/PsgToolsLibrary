;;**********************************************************************
;;
;; Title:       Directory.dbl
;;
;; Type:        Class
;;
;; Description: Provides some of the functionality of System.IO.Directory (.NET)
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;
;; Copyright    © 2014 Synergex International Corporation.  All rights reserved.
;;
;; WARNING:     All content constituting or related to this code ("Code") is the
;;              property of Synergex International Corporation ("Synergex") and
;;              is protected by U.S. and international copyright laws.
;;              If you were given this Code by a Synergex employee then you may
;;              use and modify it freely for use within your applications.
;;
;;              However, you may use the Code only for your personal use.
;;              Any other use, unless otherwise authorized in writing by
;;              Synergex is strictly prohibited.  You may not under any
;;              circumstances distribute this Code, or any modified version
;;              or part of this Code, to any third party without first
;;              obtaining written permission to do so from Synergex.
;;              In using this Code you accept that it is provided as is,
;;              and without support or warranty of any kind.
;;
;;              Neither Synergex nor the author accept any responsibility
;;              for any losses or damages of any nature which may arise
;;              from the use of this Code.  This header information must
;;              remain unaltered in the Code at all times.  Possession
;;              of this Code, or any modified version or part of this Code,
;;              indicates your acceptance of these terms.
;;
;;***********************************************************************************

import System.Collections

namespace SynPSG.System.IO

.ifdef D_GUI

	public enum SearchOption
		AllDirectories
		TopDirectoryOnly
	endenum
	
	public class Directory

		;;; <summary>
		;;; Creates a new directory. Note that this method will only create
		;;; ONE LEVEL of folder, the last level in the specified path, so
		;;; if you need to create nested folders then you must call the method
		;;; several times.
		;;; </summary>
		;;; <param name="path">Path to directory to create</param>
		;;; <returns>True if directory is created, false if not.</returns>
		public static method CreateDirectory, boolean
			required in path, string
			endparams
			stack record
				ok	,boolean
				dll	,D_ADDR ;;DLL Handle
				folder	,a260   ;;Null terminated folder spec
				null	,i4
			endrecord
		proc
			dll = %dll_open("kernel32.dll")
			xcall fill(char(0),folder)
			folder(1,path.Trim().Length) = path.Trim()
			ok = %dll_call(dll,DLL_TYPE_WINAPI,"CreateDirectoryA",^addr(folder),null=0)
			dll = dll_close(dll)
			mreturn ok
		endmethod

		;;; <summary>
		;;; Deletes an empty folder.
		;;; </summary>
		;;; <param name="path">Path to folder to delete</param>
		;;; <returns>True if folder deleted, false if not.</returns>
		public static method Delete, boolean
			required in path, string
			endparams
			stack record
				ok	,boolean
				dll	,D_ADDR ;;DLL Handle
				folder	,a260   ;;Null terminated folder spec
			endrecord
		proc
			dll = %dll_open("kernel32.dll")
			xcall fill(char(0),folder)
			folder(1,path.Trim().Length) = path.Trim()
			ok = %dll_call(dll,DLL_TYPE_WINAPI,"RemoveDirectoryA",^addr(folder))
			dll = dll_close(dll)
			mreturn ok
		endmethod
		
		;;; <summary>
		;;; Deletes a directory, and optionally all files and sub directories in the directory.
		;;; If a recursive delete is not specified then the folder must already be empty in
		;;; order for it to be deleted.
		;;; </summary>
		;;; <param name="path">Path of the directory to delete.</param>
		;;; <param name="recursive">Recirsively delete all files and sub directories?</param>
		;;; <returns>Returns true if the folder was deleted, otherwise false.</returns>
		public static method Delete, boolean
			required in path, string
			required in recursive, boolean
			endparams
			stack record
				ok	,boolean
				files	,@ArrayList
				folders	,@ArrayList
			endrecord
		proc
			ok = true
			if (!recursive) then
				ok = Directory.Delete(path)
			else
			begin
				data item, string

				;;Get all the files and sub directories in and below the folder
				folders = new ArrayList()
				files = Directory.GetFiles(path,"*",SearchOption.AllDirectories,folders)

				;;Delete all files an and below the directory
				foreach item in files
					if (!File.Delete(item))
						ok = false

				;;Delete all sub-directories from the directory
				while (folders.Count>0)
				begin
					if (!Directory.Delete((string)folders[folders.Count-1]))
						ok = false
					folders.RemoveAt(folders.Count-1)
				end
				
				;;Delete the directory
				if (ok)
					ok = Directory.Delete(path)
			end
			
			mreturn ok

		endmethod
		
		;;; <summary>
		;;; Returns an enumerable collection of directory names in a specified path.
		;;; </summary>
		;;; <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
		;;; <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by path.</returns>
		public static method EnumerateDirectories, @ArrayList
			required in path, string
			endparams
		proc
			mreturn Directory.EnumerateDirectories(path,"*",SearchOption.TopDirectoryOnly)
		endmethod
		
		;;; <summary>
		;;; Returns an enumerable collection of directory names that match a search pattern in a specified path.
		;;; </summary>
		;;; <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
		;;; <param name="searchPattern">The search string to match against the names of directories in path. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.</param>
		;;; <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by path and that match the specified search pattern.</returns>
		public static method EnumerateDirectories, @ArrayList
			required in path, string
			required in searchPattern, string
			endparams
		proc
			mreturn Directory.GetFiles(path,searchPattern,SearchOption.TopDirectoryOnly)
		endmethod
		
		;;; <summary>
		;;; Returns an enumerable collection of directory names that match a search pattern in a specified path, and optionally searches subdirectories.
		;;; </summary>
		;;; <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
		;;; <param name="searchPattern">The search string to match against the names of directories in path. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions.</param>
		;;; <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
		;;; <returns></returns>
		public static method EnumerateDirectories, @ArrayList
			required in path, string
			required in searchPattern, string
			required in searchOption, SearchOption
			endparams
			record 
				files,          @ArrayList
				directories,    @ArrayList
			endrecord
		proc
			files = Directory.GetFiles(path,searchPattern,searchOption,directories)
			mreturn directories
		endmethod

		;;; <summary>
		;;; Determines of a folder exists.
		;;; </summary>
		;;; <param name="path">Path of folder to check.</param>
		;;; <returns>True if the folder exists, false if not.</returns>
		public static method Exists, boolean
			required in path, string
			endparams
			stack record
				dll		,D_ADDR ;;DLL Handle
				folder		,a260   ;;Null terminated folder spec
				attributes	,i4
			endrecord
			.define INVALID_FILE_ATTRIBUTES		-1
			.define FILE_ATTRIBUTE_DIRECTORY	%x(10)
		proc
			dll = %dll_open("kernel32.dll")
			xcall fill(char(0),folder)
			folder(1,path.Trim().Length) = path.Trim()
			attributes = %dll_call(dll,DLL_TYPE_WINAPI,"GetFileAttributesA",^addr(folder))
			dll = dll_close(dll)
			if (attributes == INVALID_FILE_ATTRIBUTES)
				mreturn false
			mreturn (attributes & FILE_ATTRIBUTE_DIRECTORY)
		endmethod
		
		public static method GetFiles,		@ArrayList
			required in path,		string
			endparams
		proc
			mreturn Directory.GetFiles(path,"*",SearchOption.TopDirectoryOnly,^null)
		endmethod

		public static method GetFiles, 		@ArrayList
			required in path,		string
			required in searchPattern,	string
			endparams
		proc
			mreturn Directory.GetFiles(path,searchPattern,SearchOption.TopDirectoryOnly,^null)
		endmethod
		
		public static method GetFiles,		@ArrayList
			required in path,		string
			required in srchPattern,	string
			required in search,		SearchOption
			endparams
		proc
			mreturn Directory.GetFiles(path,srchPattern,search,^null)
		endmethod
		
		private static method GetFiles,		@ArrayList
			required in path,		string
			required in srchPattern,	string
			required in search,		SearchOption
			required in subfolders,		@ArrayList
			endparams

			stack record
				dll         		,D_ADDR ;;DLL Handle
				sh			,i4     ;;Search handle
				srchSpec		,string
				folder			,string
				spec			,a260   ;;Search spec
				matchingFiles		,@ArrayList
				folders			,@ArrayList
				insertSubDirAt		,int
			endrecord

			stack record WIN32_FIND_DATA
				FileAttributes      	,i4     ;;File attribute bit flags
				CreationTimeLow     	,i4     ;; Low-order 32 bits of file creation time (UTC format)
				CreationTimeHigh    	,i4     ;;High-order 32 bits of file creation time (UTC format)
				LastAccessTimeLow   	,i4     ;; Low-order 32 bits of last access time (UTC format)
				LastAccessTimeHigh  	,i4     ;;High-order 32 bits of last access time (UTC format)
				LastWriteTimeLow    	,i4     ;; Low-order 32 bits of last write time (UTC format)
				LastWriteTimeHigh   	,i4     ;;High-order 32 bits of last write time (UTC format)
				FileSizeHigh        	,i4     ;;High-order 32 bits of file size (bytes)
				FileSizeLow         	,i4     ;; Low-order 32 bits of file size (bytes)
				Reserved0           	,i4     ;;
				Reserved1           	,i4     ;;
				FileName            	,a260   ;;Name of file (null-terminated string)
				AlternateFileName   	,a14    ;;8.3 file name (null-terminated string
			endrecord

			.define INVALID_HANDLE_VALUE		-1
			.define FILE_ATTRIBUTE_READONLY     %x(1)
			.define FILE_ATTRIBUTE_HIDDEN       %x(2)
			.define FILE_ATTRIBUTE_SYSTEM       %x(4)
			.define FILE_ATTRIBUTE_DIRECTORY    %x(10)
			.define FILE_ATTRIBUTE_ARCHIVE      %x(20)
			.define FILE_ATTRIBUTE_NORMAL       %x(80)
			.define FILE_ATTRIBUTE_TEMPORARY    %x(100)
			.define FILE_ATTRIBUTE_COMPRESSED   %x(800)
			.define FILE_ATTRIBUTE_OFFLINE      %x(1000)
		proc

			dll = %dll_open("kernel32.dll")

			folder = %ExpandLogicalInFileSpec(path)
			if (folder(folder.Length:1)!="\")
				folder = folder + "\"
			
			folders = new ArrayList()
			folders.Add(folder)

			matchingFiles = new ArrayList()
			
			while (folders.Count > 0)
			begin
				insertSubDirAt = 1
				folder = (string)folders[0]
				srchSpec = folder + srchPattern
				xcall fill(char(0),spec)
				spec(1:srchSpec.Length) = srchSpec
				
				;;Look for the first file
				sh = %dll_call(dll,DLL_TYPE_WINAPI,"FindFirstFileA",^addr(spec),^addr(WIN32_FIND_DATA))

				if (sh != INVALID_HANDLE_VALUE)
				begin
					;;First file not a directory, and processing sub directories?
					if (FileAttributes & FILE_ATTRIBUTE_DIRECTORY) then 
					begin
						if ((search==SearchOption.AllDirectories)&&(FileName(1:1)!="."))
						begin
							data newFolder, string, folder+FileName(1:%instr(1,FileName,%char(0))-1)+"\"
							if (insertSubDirAt==folders.Count) then
								folders.Add(newFolder)
							else
								folders.Insert(insertSubDirAt,newFolder)
							insertSubDirAt += 1
							if (subfolders!=^null)
								subfolders.Add(newFolder)
						end
					end
					else
						matchingFiles.Add(folder + (String)FileName(1:(instr(1,FileName,char(0))-1)))

					;;Continue the search
					while (%dll_call(dll,DLL_TYPE_WINAPI,"FindNextFileA",sh,^addr(WIN32_FIND_DATA)))
					begin
						;;Next file not a directory, and processing sub directories?
						if (FileAttributes & FILE_ATTRIBUTE_DIRECTORY) then 
						begin
							if ((search==SearchOption.AllDirectories)&&(FileName(1:1)!="."))
							begin
								data newFolder, string, folder+FileName(1:%instr(1,FileName,%char(0))-1)+"\"
								if (insertSubDirAt==folders.Count) then
									folders.Add(newFolder)
								else
									folders.Insert(insertSubDirAt,newFolder)
								insertSubDirAt += 1
								if (subfolders!=^null)
									subfolders.Add(newFolder)
							end
						end
						else
							matchingFiles.Add(folder + (String)FileName(1:(%instr(1,FileName,%char(0))-1)))
					end

					;;Close the search handle
					xcall dll_call(dll,DLL_TYPE_WINAPI,"FindClose",sh)
				end
				;;Remove the folder we just processed
				folders.RemoveAt(0)
			end
			
			;;Close the DLL
			dll = dll_close(dll)

			mreturn matchingFiles

		endmethod
		
	endclass
		
.endc
	
endnamespace


