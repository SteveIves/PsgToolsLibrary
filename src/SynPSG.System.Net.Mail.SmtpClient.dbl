;;**********************************************************************
;;
;; Title:       SmtpClient.dbl
;;
;; Type:        Class
;;
;; Description:	Communictates with an SMTP server in order to send email
;;
;; IMPORTANT:   Just lie the underlying .NET Framework class, this class
;;              supports using the "SMTP Service Extension for Secure SMTP
;;              over Transport Layer Security" as defined in RFC 3207.
;;              In this mode, the SMTP session begins on an unencrypted
;;              channel, then a STARTTLS command is issued by the client
;;              to the server to switch to secure communication using SSL.
;;              See RFC 3207 published by the Internet Engineering Task
;;              Force (IETF) for more information.”
;;
;;      	    Problem is this is NOT the type of SSL that is used by
;;              many ISPs, who frequently use an alternate connection
;;              method is where an SSL session is established up front
;;              before any protocol commands are sent. This connection
;;              method is sometimes called SMTP/SSL, SMTP over SSL, or
;;              SMTPS and by default uses port 465. This alternate
;;              connection method using SSL is not currently supported.
;;
;; Author:      Tod Phillips, Synergex Professional Services Group
;;
;; Copyright    © 2009 Synergex International Corporation.  All rights reserved.
;;
;; WARNING:     All content constituting or related to this code ("Code") is the
;;              property of Synergex International Corporation ("Synergex") and
;;              is protected by U.S. and international copyright laws.
;;              If you were given this Code by a Synergex employee then you may
;;              use and modify it freely for use within your applications.
;;
;;              However, you may use the Code only for your personal use.
;;              Any other use, unless otherwise authorized in writing by
;;              Synergex is strictly prohibited.  You may not under any
;;              circumstances distribute this Code, or any modified version
;;              or part of this Code, to any third party without first
;;              obtaining written permission to do so from Synergex.
;;              In using this Code you accept that it is provided as is,
;;              and without support or warranty of any kind.
;;
;;              Neither Synergex nor the author accept any responsibility
;;              for any losses or damages of any nature which may arise
;;              from the use of this Code.  This header information must
;;              remain unaltered in the Code at all times.  Possession
;;              of this Code, or any modified version or part of this Code,
;;              indicates your acceptance of these terms.
;;
;;***********************************************************************************

.ifndef DBLNET

import SynPSG.System
import SynPSG.System.IO
import SynPSG.System.Net
import SynPSG.System.Net.Mail
import SynPSG.System.Net.Mime
import SynPSG.System.Net.Sockets
import SynPSG.System.Text.encoding
import System.Collections

.include "DBLDIR:synsock.def"

namespace SynPSG.System.Net.Mail

    public class SmtpClient

		private ipClient,			@TcpClient
        private responseCode,		integer
		private responseMessage,	string
        private isContinuation,		boolean
        private messageStream,		@NetworkStream
		private loggingEnabled, 	boolean, false

        ;;;<summary>
        ;;;Initializes a new instance of the SmtpClient class that sends e-mail by using the specified SMTP server.
        ;;;</summary>
        public method SmtpClient
            in host     ,string
        proc
            if ((host==^null) || (host.length==0)) then
                mHost = "localhost"
            else
                mHost = host
            mPort = 25
        endmethod

        ;;;<summary>
        ;;;Initializes a new instance of the SmtpClient class that sends e-mail by using the specified SMTP server and port.
        ;;;</summary>
        public method SmtpClient
            in host     ,string
            in port     ,integer
        proc
            if ((host==^null) || (host.length==0)) then
                mHost = "localhost"
            else
                mHost = host
            if (port <= 0) then
                mPort = 25
            else
                mPort = port
        endmethod

		;;; <summary>
		;;; Sends a QUIT message to the SMTP server, gracefully ends the TCP connection, and releases all resources used by the current instance of the SmtpClient class.
		;;; </summary>
		public method Dispose	,void
			endparams
			stack record
				buff	,string
			endrecord
		proc
			if (messageStream != ^null)	;; if the stream is there, send a quit message
			begin
				sendPacket("QUIT",true)
				receivePacket()
				CheckResponseCode(221)
				messageStream.Close()
			end
			if (ipClient != ^null)
				ipClient.Close()
		endmethod

        ;;;<summary>
        ;;;Sends an e-mail message to an SMTP server for delivery using the supplied MailMessage object.
        ;;;</summary>
        public method Send  ,void
            in message      ,@MailMessage
            endparams

			record
				group dt
					year        ,a4
					month       ,d2
					day         ,a2
					hour        ,a2
					minute      ,a2
					seconds     ,a2
					milli       ,a6
				endgroup
				m_data          ,a28500         ;; Equates to 500 SMTP lines (57 bytes before conversion to Base64, 76 bytes + CRLF after conversion)
				m_data_len      ,i4             ;; number of characters in m_data
				minsOffset      ,i4             ;; timezone offset (in minutes)
				UMToffset       ,a5             ;; string representation of timezone offset
			endrecord

			record
				buff            ,string
				m_tempAddress   ,@MailAddress
			endrecord
			
        proc

			;;Enable debug logging if requested
			startDebugLogging()
			
            if (message.From.Address == "")
                throw new applicationexception("No from address provided.")

            if (message.To.Count == 0)
                throw new applicationexception("No to addresses specified.")

			debugLog("Connecting to SMTP server " + mHost.Trim() + " on port " + %string(mPort))
            ipClient = new TcpClient(mHost, mPort)
            messageStream = ipClient.GetStream()

            ;;Set the timeout to 30 seconds
            messageStream.ReadTimeout = 30000

            ;;Get initial response from the server
			begin
				data tempBuf    ,a1024
				data len, i4
				if (len=messageStream.Read(tempBuf,0,^size(tempBuf)))
				begin
					debugLog("Recv: "+tempBuf(1:len))
					responseCode = %integer(tempBuf(1:3))
					isContinuation = false
					responseMessage = tempBuf(5,len)
				end
				CheckResponseCode(220)
			end

            ;;Service is available
			;;Tell the server the sender's domain
            responseMessage = responseMessage.ToUpper()

            ;;If "ESMTP" was in the previous 220 response then the server should support EHLO
			;;Send the HELO or EHLO message
            if(responseMessage.Contains("ESMTP")) then
                sendPacket("EHLO " + message.From.Host,true)
            else
                sendPacket("HELO " + message.From.Host,true)
            receivePacket()
            CheckResponseCode(220)

            ;;Get any additional responses after logon
            while(isContinuation==true)
            begin
                receivePacket()
                CheckResponseCode(250)
            end

            if(responseMessage.StartsWith("TLS "))
            begin
				sendPacket("STARTTLS TLS1.0",true)
                receivePacket()
                CheckResponseCode(220)

				sendPacket("EHLO " + message.From.Host,true)
                receivePacket()
                CheckResponseCode(220)

                ;; get additional responses after logon
                while(isContinuation==true)
                begin
                    receivePacket()
                    CheckResponseCode(250)
                end
            end

            if(responseMessage.StartsWith("AUTH "))
            begin
                ;; performed authentication
                data authenticated ,boolean ,false

                if (responseMessage.Contains(" LOGON "))
                begin
					sendPacket("auth login",true)

                    ;; get username prompt
                    receivePacket()
                    checkResponseCode(334)

                    ;; base64 encrypted username
					sendPacket(Convert.ToBase64String(AsciiEncoding.GetBytes(Credentials.Username),SynPSG.Base64FormattingOptions.None),true)

                    ;; get password prompt
                    receivePacket()
                    checkResponseCode(334)

                    ;; base64 encrypted password
					sendPacket(Convert.ToBase64String(AsciiEncoding.GetBytes(Credentials.Password),SynPSG.Base64FormattingOptions.None),true)

                    authenticated = true
                end

                if (authenticated == false && responseMessage.Contains(' PLAIN '))
                begin
					sendPacket("AUTH PLAIN",true)

                    ;; get empty response
                    receivePacket()
                    checkResponseCode(334)

                    ;base64 encrypted simple username
					sendPacket(Convert.ToBase64String(AsciiEncoding.GetBytes(Credentials.Username),SynPSG.Base64FormattingOptions.None),true)

                    authenticated = true
                end

                if (authenticated == false && responseMessage.Contains(' CRAM-MD5 '))
                begin
					debugLog("Recv: "+%string(responseCode,"XXX")+" "+responseMessage)
					buff = "Server requested usupported authentication mecanism: CRAM-MD5"
					debugLog("Fail: "+buff)
					throw new ApplicationException(buff)
                end

                if (authenticated == false && responseMessage.Contains(' DIGEST-MD5 '))
                begin
					debugLog("Recv: "+%string(responseCode,"XXX")+" "+responseMessage)
					buff = "Server requested usupported authentication mecanism: DIGEST-MD5"
					debugLog("Fail: "+buff)
					throw new ApplicationException(buff)
                end

                if (authenticated == false && responseMessage.Contains(' GSSAPI '))
                begin
					debugLog("Recv: "+%string(responseCode,"XXX")+" "+responseMessage)
					buff = "Server requested usupported authentication mecanism: GSSAPI"
					debugLog("Fail: "+buff)
					throw new ApplicationException(buff)
                end

                if(authenticated == false)
				begin
					debugLog("Recv: "+%string(responseCode,"XXX")+" "+responseMessage)
					buff = "Unknown Authentication Request: " + responseMessage
					debugLog("Fail: "+buff)
                    throw new ApplicationException(buff)
				end

                ;; get authorization response
                receivePacket()
                checkResponseCode(235)
            end

            ;;Tell the server about the sender
			sendPacket("MAIL FROM:<" + message.From.Address + ">",true)
            receivePacket()
            checkResponseCode(0)

            ;;Send recipient list
			begin
				data ix, int
				for ix from 0 thru message.To.Count-1
				begin
					sendPacket("RCPT TO:<"+message.To[ix].Address+">",true)
					receivePacket()

					;----------------------------------------------------------------------------------
					;;This code was added by Steve Ives because this behavior was seen in some
					;;SMTP servers requiring authentication (e.g. the Arvixe servers).
					if (responseMessage=="SMTP authentication is required.") ;530
					begin
						sendPacket("auth login",true)
						receivePacket()						;get username prompt
						checkResponseCode(334)

						;;base64 encrypted username
						sendPacket(Convert.ToBase64String(AsciiEncoding.GetBytes(Credentials.Username),SynPSG.Base64FormattingOptions.None),true)
						receivePacket()						;get password prompt
						checkResponseCode(334)

						;;base64 encrypted password
						sendPacket(Convert.ToBase64String(AsciiEncoding.GetBytes(Credentials.Password),SynPSG.Base64FormattingOptions.None),true)
						receivePacket()
						checkResponseCode(235)				;Should be 235 "authenticated."

						;;Now we need to send the RCPT TO again because the last one
						;;wasn't processed because of the authentication request.
						sendPacket("RCPT TO:<"+message.To[ix].Address+">",true)
						receivePacket()
					end

					checkResponseCode(0)

				end
			end

            ;;Send cc list
			begin
				data ix, int
				for ix from 0 thru message.CC.Count-1
				begin
					sendPacket("RCPT TO:<"+message.CC[ix].Address+">",true)
					receivePacket()
					checkResponseCode(0)
				end
			end

            ;;Now send DATA command
			sendPacket("DATA",true)
            receivePacket()
            checkResponseCode(354)

            ;;Send message header
			sendPacket("X-Mailer: Synergy DBL",true)
			sendPacket(SynPSG.StringUtil.Format("Date: {0:ddd dd MMM yyyy HH:mm:ss zzz}", %datetime),true)

            ;;Sender
            if (message.From.DisplayName) then
				sendPacket('From: "'+message.From.DisplayName+'" <'+message.From.Address+'>',true)
            else
				sendPacket("From: "+message.From.Address,true)

            ;;Recipient
			begin
				data ix, int
				buff = "To:"
				for ix from 0 thru message.To.Count-1
				begin
					if (ix)
						buff = String.Concat(buff,',')
					if (message.To[ix].DisplayName) then
						buff = String.Concat(buff,' "'+message.To[ix].DisplayName+'" <'+message.To[ix].Address+'>')
					else
						buff = String.Concat(buff,' '+message.To[ix].Address)
				end
				sendPacket(buff,true)
			end

            ;;CC:
            if (message.CC.Count>0)
            begin
				data ix, int
                buff = "Cc:"
                for ix from 0 thru message.CC.Count-1
                begin
                    if (ix)
                        buff = String.Concat(buff,',')
                    if (message.CC[ix].DisplayName) then
                        buff = String.Concat(buff,' "'+message.CC[ix].DisplayName+'" <'+message.CC[ix].Address+'>')
                    else
                        buff = String.Concat(buff," "+message.CC[ix].Address)
				end
				sendPacket(buff,true)
            end

            ;;BCC:
            if (message.Bcc.Count>0)
            begin
				data ix, int
                buff = "Bcc:"
                for ix from 0 thru message.Bcc.Count-1
                begin
                    if (ix)
                        buff = String.Concat(buff,',')
                    if (message.Bcc[ix].DisplayName) then
                        buff = String.Concat(buff,' "'+message.Bcc[ix].DisplayName+'" <'+message.Bcc[ix].Address+'>')
                    else
                        buff = String.Concat(buff," "+message.Bcc[ix].Address)
				end
				sendPacket(buff,true)
            end

            ;;Reply to
            if (message.ReplyTo!=^null)
            begin
                if (message.ReplyTo.DisplayName.Length>0) then
                    buff = 'Reply-To: "'+message.ReplyTo.DisplayName+'" <'+message.ReplyTo.Address+'>'
                else
                    buff = "Reply-To: "+message.ReplyTo.Address
				sendPacket(buff,true)
            end

            ;;Subject
			sendPacket("Subject: "+message.Subject,true)

            ;;Content MIME headers
			sendPacket("Mime-Version: 1.0",true)

            if (message.Attachments.Count>0) then
                sendPacket('Content-Type: multipart/mixed; boundary="_NextPart_'+%hex(%jbno)+'"',true)
            else
			begin
                if (message.IsBodyHtml) then
                    sendPacket('Content-Type: text/html; charset="iso-8859-1"',true)
                else
                    sendPacket('Content-Type: text/plain; charset="iso-8859-1"',true)
			end

            ;;If there are attachments then the message body goes in the first "part"
            if (message.Attachments.Count>0)
            begin
				sendPacket("",true)
				sendPacket("--_NextPart_"+%hex(%jbno),true)
                if (message.IsBodyHtml) then
                    sendPacket('Content-Type: text/html; charset="iso-8859-1"',true)
                else
                    sendPacket('Content-Type: text/plain; charset="iso-8859-1"',true)
			end
			
			;;Send message body
            sendPacket("Content-Transfer-Encoding: quoted-printable",true)
			sendPacket("",true)
            sendPacket(message.Body,true)
			
			;;Send attachments
			begin
				data ix, int
				for ix from 0 thru message.Attachments.Count-1
				begin
					data atch, @Attachment, message.Attachments[ix]

					sendPacket("",true)
					sendPacket("--_NextPart_"+%hex(%jbno),true)
					sendPacket("Content-Type: "+atch.ContentType.ToString(),true)
					sendPacket("Content-Disposition: "+atch.ContentDisposition.DispositionType+'; filename="'+atch.Name+'"',true)

					using atch.TransferEncoding select
					(TransferEncoding.Base64),
						sendPacket('Content-Transfer-Encoding: base64',true)
					(TransferEncoding.QuotedPrintable),
						sendPacket('Content-Transfer-Encoding: quoted-printable',true)
					(),
						sendPacket('Content-Transfer-Encoding: 7bit',true)
					endusing

					sendPacket("",true)

					repeat
					begin
						m_data_len = ((FileStream)atch.ContentStream).Read(m_data,0,^size(m_data))
						;; Check for EndOfFile condition
						if (!m_data_len)
							exitloop
						using atch.TransferEncoding select
						(TransferEncoding.Base64),
							sendPacket(Convert.ToBase64String(AsciiEncoding.GetBytes(m_data(1:m_data_len)),SynPSG.Base64FormattingOptions.InsertLineBreaks),false)
						(),
							sendPacket(m_data(1:m_data_len),false)
						endusing
					end
				end
			end

            if (message.Attachments.Count>0)
				sendPacket('--_NextPart_'+%hex(%jbno)+"--",true)

			;;End of message
			sendPacket(".",true)
            receivePacket()
            checkResponseCode(250)

			endDebugLogging()

        endmethod
		
		;;;<summary>
		;;;Sends an e-mail message to an SMTP server for delivery using the supplied string arguments.
		;;;</summary>
		public method Send, void
			in from     ,string
			in to       ,string
			in subject  ,string
			in body     ,string
			endparams
		proc
			this.Send(new MailMessage(from,to,subject,body))
		endmethod
		
		;;---------------------------------------------------------------------
		;;Private methods
		
		private method sendPacket, void
			required in packetData, string
			required in addCrLf, boolean
			endparams
			record 
				msg, string
			endrecord
		proc
			debugLog("Send: "+packetData)
			msg = packetData
			if (addCrLf)
				msg = msg + %char(13) + %char(10)
			messageStream.Write(msg,0,msg.Length)
		endmethod
		
		private debugLogChannel, i4

		private method startDebugLogging, void
			endparams
		proc
			if (mEnableLogging&&(!loggingEnabled))
			begin
				open(debugLogChannel=0,o,"SmtpClient.log")
				loggingEnabled = true
			end
		endmethod
		
		private method endDebugLogging, void
			endparams
		proc
			if (loggingEnabled)
			begin
				close debugLogChannel
				loggingEnabled = false
			end
		endmethod

		private method debugLog, void
			required in logMessage, string
			endparams
		proc
			if (loggingEnabled)
				writes(debugLogChannel,logMessage)
		endmethod

        private method receivePacket, void
            endparams

			stack record vars
				lineBuf     ,a1024
				byteCount   ,i4
				mByte		,i1
			endrecord

        proc
            init lineBuf,byteCount

            ;;Read one byte at a time from the stream so we detect an <LF> being received
            while (((mByte=messageStream.ReadByte())!=(-1)) && (%char(mByte)!=%char(10)))
                lineBuf(byteCount+=1:1)=%char(mByte)

            ;;Remove any trailing <CR>
            if((byteCount>0) && (lineBuf(byteCount:1)==%char(13)))
                byteCount -= 1

            try
            begin
                responseCode = %integer(lineBuf(1:3))
                if(lineBuf(4:1)==" ") then
                    isContinuation = false
                else
                    isContinuation = true
                responseMessage = lineBuf(5,byteCount)
            end
            catch (ex)
            begin
                responseCode = 999
                isContinuation = false
                if(byteCount>0) then
                    responseMessage = lineBuf(1,byteCount)
                else
                    responseMessage = ""
            end
            endtry

			debugLog("Recv: "+lineBuf(1,byteCount))

        endmethod

        private method checkResponseCode,   void
            req in expectedResponseCode,	integer
            endparams
			record 
				mErrMsg, string
			endrecord
        proc
            mErrMsg = ""

			;;Did we get the exact response we expected?
            if (expectedResponseCode && (responseCode==expectedResponseCode))
                mreturn

			;;No, so what response did we get?
            using responseCode select

            (100 thru 199),
                mreturn ;; ok preliminary reply

            (200 thru 299),
                mreturn ;; ok completion reply

            (300 thru 399),
                mreturn ;; ok intermeditate reply

            (421),
                if (responseMessage.Length>0) then
                    mErrMsg = responseMessage
                else
                    mErrMsg = "Domain Service not available."

            (450),
                mErrMsg = "Requested mail action not taken: mailbox unavailable."

            (451),
                mErrMsg = "Requested action aborted: local error in processing."

            (452),
                mErrMsg = "Requested action not taken: insufficient system storage."

            (500),
                mErrMsg = "Syntax error, command unrecognized."

            (501),
                mErrMsg = "Syntax error in paramaters or arguments."

            (502),
                mErrMsg = "Command not implemented."

            (503),
                mErrMsg = "Bad sequence of commands."

            (504),
                mErrMsg = "Command paramater not implemented."

            (521),
                if (responseMessage.Length>0) then
                    mErrMsg = responseMessage
                else
                    mErrMsg = "Domain does not accept mail."

            (530),
                mErrMsg = "Access denied."

			(535),
				mErrMsg = "Authentication credentials invalid."

            (550),
                mErrMsg = "Requested action not taken: mailbox unavailable."

            (551),
                if (responseMessage.Length>0) then
                    mErrMsg = responseMessage
                else
                    mErrMsg = "User not local."

            (552),
                mErrMsg = "Requested mail action aborted: exceeded storage allocation."

            (553),
                mErrMsg = "Requested action not taken: mailbox name not allowed."

            (554),
                mErrMsg = "Transaction failed."

            (560),
                mErrMsg = "Must issue STARTTLS command first."

            (),
                mErrMsg = "Unrecognized SMTP response "+%string(responseCode)+". SmtpClient.checkResponseCode should be enhanced!"

            endusing

            if (mErrMsg.Length)
            begin
                ;messageStream.Close()
				;SI: I don't think we should close the stream, because the Dispose method attempts to send a quit message!
				;If we DO close the stream here then we should also do messageStream = ^null to prevent that

                throw new ApplicationException(mErrMsg)
            end

        endmethod
		
		;;---------------------------------------------------------------------
		;;Properties
		
		private mHost, string

		public property Host, string
			method get
			proc
				mreturn mHost
			endmethod
			method set
			proc
				mHost = value
			endmethod
		endproperty

		private mPort, int

		public property Port, int
			method get
			proc
				mreturn mPort
			endmethod
			method set
			proc
				mPort = value
			endmethod
		endproperty

		private mCredentials, @NetworkCredential

		public property Credentials ,@NetworkCredential
			method get
			proc
				mreturn mCredentials
			endmethod
			method set
			proc
				mCredentials = value
			endmethod
		endproperty

		private mEnableLogging, boolean, false

		public property EnableLogging, boolean
			method get
			proc
				mreturn mEnableLogging
			endmethod
			method set
			proc
				mEnableLogging = value
			endmethod
		endproperty

		
    endclass

endnamespace

.endc
