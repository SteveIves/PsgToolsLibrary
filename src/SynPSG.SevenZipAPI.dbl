;;**********************************************************************
;;
;; Title:       SevenZipAPI.dbl
;;
;; Type:        API
;;
;; Description: Wraps some of the sunctionality of 7z.exe (7-Zip)
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;
;; Copyright    © 2014 Synergex International Corporation.  All rights reserved.
;;
;; WARNING:     All content constituting or related to this code ("Code") is the
;;              property of Synergex International Corporation ("Synergex") and
;;              is protected by U.S. and international copyright laws.
;;              If you were given this Code by a Synergex employee then you may
;;              use and modify it freely for use within your applications.
;;
;;              However, you may use the Code only for your personal use.
;;              Any other use, unless otherwise authorized in writing by
;;              Synergex is strictly prohibited.  You may not under any
;;              circumstances distribute this Code, or any modified version
;;              or part of this Code, to any third party without first
;;              obtaining written permission to do so from Synergex.
;;              In using this Code you accept that it is provided as is,
;;              and without support or warranty of any kind.
;;
;;              Neither Synergex nor the author accept any responsibility
;;              for any losses or damages of any nature which may arise
;;              from the use of this Code.  This header information must
;;              remain unaltered in the Code at all times.  Possession
;;              of this Code, or any modified version or part of this Code,
;;              indicates your acceptance of these terms.
;;
;;***********************************************************************************

import SynPSG.System.IO

namespace SynPSG.SevenZipAPI

	public enum OverwriteMode
		Always
		Never
		RenameNewFile
		RenameExistingFile
	endenum

	public class SevenZip
		
		private exePath, string
		
		public method SevenZip
			endparams
		proc
			;;Make sure we can finf the 7-Zip executable
			if (!File.Exists(exePath="C:\Program Files\7-Zip\7z.exe"))
				if (!File.Exists(exePath="C:\Program Files (x86)\7-Zip\7z.exe"))
					throw new ApplicationException("7-Zip is not installed!")		
		endmethod
		
		public method CompressFolder,	boolean
			required in folder,	string
			required in zipFile,	string
			required in recurse,	boolean
			endparams
			record 
				ok,		boolean
				command,	string
				ch,		int
				buffer,		a256
			endrecord
		proc
			ok = false
			command = "|" + exePath + " a -y "
			if (recurse)
				command = command + "-r "
			command = command + zipFile + " "
			command = command + folder
			
			open(ch,i,command)
			repeat
			begin
				reads(ch,buffer,eof)
				if (buffer=="Everything is Ok")
				begin
					ok = true
					exitloop
				end
			end
		eof,	close ch
			mreturn ok
		endmethod
		
		;;; <summary>
		;;; Extracts all files from a zip file to a folder without overwriting any existing files.
		;;; </summary>
		;;; <param name="zipFile">Zip file to extract.</param>
		;;; <param name="folder">Folder to extract to.</param>
		;;; <returns></returns>
		public method ExtractToFolder,	boolean
			required in zipFile,	string
			required in folder,	string
			endparams
			record 
				ok,		boolean
				command,	string
				ch,		int
				buffer,		a256
			endrecord
		proc
			mreturn this.ExtractToFolder(zipFile,folder,OverwriteMode.Never)
		endmethod
		
		public method ExtractToFolder,	boolean
			required in zipFile,	string
			required in folder,	string
			required in mode,	OverWriteMode
			endparams
			record 
				ok,		boolean
				command,	string
				ch,		int
				buffer,		a256
			endrecord
		proc
			ok = false
			command = '|"' + exePath + '" e "' + zipFile + '" -o"' + folder + '" -y'
			
			using mode select
			(OverwriteMode.Always),
				command = command + ' -aoa'
			(OverwriteMode.Never),
				command = command + ' -aos'
			(OverwriteMode.RenameNewFile),
				command = command + ' -aou'
			(OverwriteMode.RenameExistingFile),
				command = command + ' -aot'
			endusing

			command = command + ""
			
			open(ch,i,command)
			repeat
			begin
				reads(ch,buffer,eof)
				if (buffer=="Everything is Ok") then
				begin
					ok = true
					exitloop
				end
				else if (buffer=="Error:")
				begin
					exitloop
				end
			end
		eof,	close ch
			mreturn ok
		endmethod

	endclass

endnamespace


