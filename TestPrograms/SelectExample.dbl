;;*****************************************************************************
;;
;; Title:       SelectExample.dbl
;;
;; Type:        Program
;;
;; Description: An example of how to use the Select classes in such a way that
;;              it is still possible to CALL existing code (it's not possible
;;              to CALL out of a FOREACH).
;;
;; Date:        September 2014
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2014, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

import Synergex.synergyde.Select

main SelectExample
	
	record syntxt
		fac		,a3
		num		,d5
		code	,a10
		sev		,a199
	endrecord
	
	record 
		s, @Select
		f, @From
		e, @AlphaEnumerator
	endrecord

proc
	
	open(1,i,"tt:")
	
	;;If you want to be able to implement select in existing code, where it
	;;is necessary to CALL out to existing logic, then FOREACH can't be used.
	;;This is because FOREACH established a local data scope, out of whih it
	;;is not valid to CALL.
	;;
	;;The solution is to manually operate the SELECT class's enumerator (that's
	;;pretty much all FOREACH does).
	;;
	;;First instantiate the objects you will need, making sure to have seperate
	;;object handles for both the FROM and SELECT objects. This is because it is
	;;important to call the DISPOSE methods on these objects (that's another thing
	;;FOREACH does for you IF the NEW is within the FOREACH.
	
	f = new From("DBLDIR:syntxt.ism@LOCALHOST",syntxt)
	s = new Select(f)
	e = s.GetEnumerator()
	
	;;Now operate the enumerator (to work through the resulting data)
	
	while (e.MoveNext())
	begin
		;;The enumerator's CURRENT property represents the current record
		syntxt = e.Current
		call process_record
	end
	
	;;When you're done, don't forget to DISPOSE the SELECT and FROM objects.
	s.Dispose()
	f.Dispose()
	
	close 1
	stop
	
process_record,
	writes(1,syntxt.code)
	return
	
endmain
